# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: v1
kind: Template
labels:
  template: application-template-osio-pipeline
message: |-
  A Jenkins server will be automatically instantiated in this project to manage
  the Pipeline BuildConfig created by this template.  You will be able to log in to
  it using your OpenShift user credentials.
metadata:
  annotations:
    description: |-
      This example showcases the new Jenkins Pipeline integration in OpenShift,
      which performs continuous integration and deployment right on the platform.
      The template contains a Jenkinsfile - a definition of a multi-stage CI/CD process - that
      leverages the underlying OpenShift platform for dynamic and scalable
      builds. OpenShift integrates the status of your pipeline builds into the web
      console allowing you to see your entire application lifecycle in a single view.
    iconClass: icon-jenkins
    openshift.io/display-name: OSIO Pipeline
    tags: instant-app,jenkins
  name: osio-pipeline-build
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind":
        "DeploymentConfig"}]'
    labels:
      name: osio-pipeline
    name: osio-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |
          try {
            timeout(time: 20, unit: 'MINUTES') {
              node('nodejs') {
                stage('Build') {
                  openshiftBuild(buildConfig: 'osio-nodejs', showBuildLogs: 'true')
                }

                stage('Deploy to staging') {
                  environ = "-stage"
                  // Populating istag to stage project
                  try {
                    sh "JSON=\$(oc get -o json is/osio-nodejs -n cboudjna-osiotest1${environ});oc delete is/osio-nodejs -n cboudjna-osiotest1${environ} && echo \$JSON|oc create -n cboudjna-osiotest1${environ} -f -;oc get istag -n cboudjna-osiotest1${environ}"
                  } catch (err) {
                    error "Error running OpenShift command ${err}"
                  }
                  openshiftDeploy(deploymentConfig: 'osio-nodejs', namespace: 'cboudjna-osiotest1' + environ)

                  try {
                    sh "oc get route -n cboudjna-osiotest1${environ} osio-nodejs --template 'http://{{.spec.host}}';echo"
                  } catch (err) {
                    error "Error running OpenShift command ${err}"
                  }

                  def timeoutTime = 1
                  def proceedMessage = """Would you like to promote to the next environment?
          """

                  try {
                    timeout(time: timeoutTime, unit: 'HOURS') {
                      input id: 'Proceed', message: "\n${proceedMessage}"
                    }
                  } catch (err) {
                    throw err
                  }
                }

                stage('Deploy to production') {
                  environ = "-run"
                  // Populating istag to stage project
                  try {
                    sh "JSON=\$(oc get -o json is/osio-nodejs -n cboudjna-osiotest1${environ});oc delete is/osio-nodejs -n cboudjna-osiotest1${environ} && echo \$JSON|oc create -n cboudjna-osiotest1${environ} -f -;oc get istag -n cboudjna-osiotest1${environ}"
                  } catch (err) {
                    error "Error running OpenShift command ${err}"
                  }
                  openshiftDeploy(deploymentConfig: 'osio-nodejs', namespace: 'cboudjna-osiotest1' + environ)

                  try {
                    sh "oc get route -n cboudjna-osiotest1${environ} osio-nodejs --template 'http://{{.spec.host}}';echo"
                  } catch (err) {
                    error "Error running OpenShift command ${err}"
                  }

                }
              }
            }
          } catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    postCommit:
      script: npm test
    source:
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:4
          namespace: ${NAMESPACE}
      type: Source
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: osio-nodejs
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/openshift/nodejs-ex.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: The OpenShiftIO NodeJS ImageStreams reside.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Target User
  displayName: Target user to deploy to
  name: TARGET_USER
  required: true
